Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const featureWorkers_1 = require("../utils/featureWorkers");
const transformer = require("../transformer");
const vscode = require("vscode-languageserver-protocol");
function register(context) {
    return (uri) => {
        return (0, featureWorkers_1.documentFeatureWorker)(context, uri, file => !!file.capabilities.documentSymbol, // TODO: add color capabilitie setting
        (plugin, document) => { var _a; return (_a = plugin.findDocumentSymbols) === null || _a === void 0 ? void 0 : _a.call(plugin, document); }, (data, map) => map ? transformer.asSymbolInformations(data, location => {
            const range = map.toSourceRange(location.range);
            if (range) {
                // use document.uri instead of map.sourceDocument.uri to fix https://github.com/johnsoncodehk/volar/issues/1925
                return vscode.Location.create(uri, range);
            }
        }) : data, arr => arr.flat());
    };
}
exports.register = register;
//# sourceMappingURL=documentSymbols.js.map